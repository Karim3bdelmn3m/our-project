 def encode_image(self, hidden_message, image_path, new_file_name):
        img = Image.open(image_path)
        binary_message = ''.join(format(ord(char), '08b') for char in hidden_message)
        binary_message += '1111111111111110'  # End of message delimiter
        pixels = img.load()

        message_index = 0
        for i in range(img.width):
            for j in range(img.height):
                pixel = list(pixels[i, j])
                for k in range(3):  # Loop through RGB channels
                    if message_index < len(binary_message):
                        pixel[k] = pixel[k] & 0xFE | int(binary_message[message_index])
                        message_index += 1
                pixels[i, j] = tuple(pixel)

        img.save(new_file_name)

    def decode_image(self, image_path):
        img = Image.open(image_p
        pixels = img.load()
        
        binary_message = ""
        for i in range(img.width):
            for j in range(img.height):
                pixel = pixels[i, j]
                for k in range(3):  # Loop through RGB channels
                    binary_message += str(pixel[k] & 1)

        byte_message = [binary_message[i:i+8] for i in range(0, len(binary_message), 8)]
        decoded_message = "".join(chr(int(byte, 2)) for byte in byte_message if int(byte, 2) != 255)
        return decoded_message

    def encode_audio(self, hidden_message, audio_path, new_file_name):
        audio = wave.open(audio_path, 'rb')
        frame_bytes = bytearray(list(audio.readframes(audio.getnframes())))
        
        binary_message = ''.join(format(ord(char), '08b') for char in hidden_message)
        binary_message += '1111111111111110'  # End of message delimiter
        message_index = 0

        for i in range(len(frame_bytes)):
            if message_index < len(binary_message):
                frame_bytes[i] = frame_bytes[i] & 0xFE | int(binary_message[message_index])
                message_index += 1

        with wave.open(new_file_name, 'wb') as encoded_audio:
            encoded_audio.setparams(audio.getparams())
            encoded_audio.writeframes(bytes(frame_bytes))

    def decode_audio(self, audio_path):
        audio = wave.open(audio_path, 'rb')
        frame_bytes = bytearray(list(audio.readframes(audio.getnframes())))
        
        binary_message = ""
        for byte in frame_bytes:
            binary_message += format(byte, '08b')[-1]

        byte_message = [binary_message[i:i+8] for i in range(0, len(binary_message), 8)]
        decoded_message = "".join(chr(int(byte, 2)) for byte in byte_message if int(byte, 2) != 255)
        return decoded_message
